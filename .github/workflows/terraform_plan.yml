name: PR Checks
description: "Runs terraform plan when code is pushed to branch/PR?"
on:
  pull_request:

# on:
#   - pull_request:

env:
  TF_CLOUD_ORGANIZATION: "oak-national-academy"
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  TF_WORKSPACE: "curr-kofo"
  CONFIG_DIRECTORY: "./"
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

permissions:
  contents: read
  pull-requests: write

jobs:
  trigger_tfc_plan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set tag_id for PRs
        run: |
          echo "TF_VAR_tag_id=\"pr-preview\"" >> $GITHUB_ENV
          echo "Set TF_VAR_tag_id to pr-preview for PR run"

      - name: Create Plan Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
        id: plan-run
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version: ${{ steps.plan-upload.outputs.configuration_version_id }}
          plan_only: true

      # - name: Upload Configuration
      #   uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0
      #   id: plan-upload
      #   with:
      #     workspace: ${{ env.TF_WORKSPACE }}
      #     directory: ${{ env.CONFIG_DIRECTORY }}
      #     speculative: true

      # - name: Create Plan Run
      #   uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
      #   id: plan-run
      #   with:
      #     workspace: ${{ env.TF_WORKSPACE }}
      #     configuration_version: ${{ steps.plan-upload.outputs.configuration_version_id }}
      #     plan_only: true

      - name: Get Plan Output
        uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.0.0
        id: plan-output
        with:
          plan: ${{ fromJSON(steps.plan-run.outputs.payload).data.relationships.plan.data.id }}
    
      - name: Update PR
        uses: actions/github-script@v6
        id: plan-comment
        with:
          github-token: ${{ env.GITHUB_TOKEN }}
          # github-token: ${{ secrets.GITHUB_TOKEN }}
          # script: |
          #   const owner  = context.repo.owner;
          #   const repo   = context.repo.repo;
          #   const issue  = context.issue.number;
          #   // build the comment body
          #   const body = `#### HCP Terraform Plan Output
          #   \`\`\`
          #   Plan: ${steps.plan-output.outputs.add} to add, ${steps.plan-output.outputs.change} to change, ${steps.plan-output.outputs.destroy} to destroy.
          #   \`\`\`
          #   [View full run in Terraform Cloud](${steps.plan-run.outputs.run_link})`;

          #   // look for an existing bot comment
          #   const comments = await github.rest.issues.listComments({ owner, repo, issue_number: issue });
          #   const existing = comments.data.find(c => c.user.type === 'Bot' && c.body.includes('HCP Terraform Plan Output'));

          #   // common params for both update & create
          #   const params = { owner, repo, body, issue_number: issue };
          #   if (existing) {
          #     await github.rest.issues.updateComment({ ...params, comment_id: existing.id });
          #   } else {
          #     await github.rest.issues.createComment(params);
              # }
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('HCP Terraform Plan Output')
            });
            const output = `#### HCP Terraform Plan Output
            Plan: ${{ steps.plan-output.outputs.add }} to add, ${{ steps.plan-output.outputs.change }} to change, ${{ steps.plan-output.outputs.destroy }} to destroy.
                
            [HCP Terraform Plan](${{ steps.plan-run.outputs.run_link }})
                `;
            
            // 3. Delete previous comment so PR timeline makes sense
            if (botComment) {
              github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
              });
            }
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
